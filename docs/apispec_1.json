{
  "basePath": "/api", 
  "definitions": {
    "Asset instances": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Asset types": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Assets": {
      "properties": {
        "complete": {
          "default": false, 
          "type": "boolean"
        }, 
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "petId": {
          "format": "int64", 
          "type": "integer"
        }, 
        "quantity": {
          "format": "int32", 
          "type": "integer"
        }, 
        "shipDate": {
          "format": "date-time", 
          "type": "string"
        }, 
        "status": {
          "description": "Order Status", 
          "enum": [
            "placed", 
            "approved", 
            "delivered"
          ], 
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Order"
      }
    }, 
    "Comments": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Episodes": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Events": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "File status": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Metadata": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Notifications": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Output files": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Output types": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Persons": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Playlists": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Preview files": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Projects": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Search filters": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Sequences": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Shots": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Software": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Subscriptions to notifications": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Task status": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Task types": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Tasks": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Time spents": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }, 
    "Working files": {
      "properties": {
        "id": {
          "format": "int64", 
          "type": "integer"
        }, 
        "name": {
          "type": "string"
        }
      }, 
      "type": "object", 
      "xml": {
        "name": "Category"
      }
    }
  }, 
  "host": "localhost:8080", 
  "info": {
    "contact": {
      "email": "support@cg-wire.com", 
      "responsibleDeveloper": "CGWire", 
      "responsibleOrganization": "CGWire", 
      "url": "https://www.cg-wire.com"
    }, 
    "description": "# Welcome to the Zou (Kitsu API) documentation \n\nZou is an API that allows to store and manage the data of your CG production. Through it you can link all the tools of your pipeline and make sure they are all synchronized.\n\n To integrate it in your tools you can rely on the dedicated Python client named [Gazu](https://gazu.cg-wire.com/).\n\nThe source is available on [Github](https://github.com/cgwire/zou).\n\n# Who is it for?\n\nThe audience for Zou is made of Technical Directors, ITs and Software Engineers from CG studios. With Zou they can enhance the tools they provide to all departments.\n\nOn top of it, you can deploy Kitsu, the production tracker developed by CGWire.\n\n# Features\n\nZou can:\n\n* Store production data: projects, shots, assets, tasks, files metadata and validations.\n* Provide folder and file paths for any task.\n* Data import from Shotgun or CSV files.\n* Export main data to CSV files.\n* Provide helpers to manage task workflow (start, publish, retake).\n* Provide an event system to plug external modules on it.\n\n", 
    "license": {
      "name": "AGPL 3.0", 
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    }, 
    "termsOfService": "https://www.cg-wire.com/terms.html", 
    "title": "Zou", 
    "version": "0.14.21"
  }, 
  "operationId": "getmyData", 
  "paths": {
    "/": {
      "get": {
        "summary": "Get API name and version.", 
        "tags": [
          "Index"
        ]
      }
    }, 
    "/actions/entities/{entity_id}/set-main-preview/{preview_file_id}": {
      "put": {
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "preview_file_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Main preview set"
          }
        }, 
        "summary": "Set main preview to given file.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/actions/persons/{person_id}/assign": {
      "put": {
        "description": "If a given task ID is wrong, it ignores it.", 
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "description": "List of tasks ID", 
            "in": "body", 
            "name": "Task", 
            "schema": {
              "properties": {
                "task_ids": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "task_ids"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given tasks lists assigned to given person"
          }
        }, 
        "summary": "Assign given task lists to given person.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/persons/{person_id}/departments/add": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "User added to given department"
          }
        }, 
        "summary": "Add a user to given department.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/actions/persons/{person_id}/departments/{department_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "department_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "User removed from given department"
          }
        }, 
        "summary": "Remove a user from given department.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/actions/persons/{person_id}/invite": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Email sent"
          }
        }, 
        "summary": "Sends an email to given person to invite him/her to connect to Kitsu.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/actions/preview-files/{preview_file_id}/set-main-preview": {
      "put": {
        "description": "This preview will be used to illustrate the entity.", 
        "parameters": [
          {
            "in": "path", 
            "name": "preview_file_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given preview set as main preview"
          }
        }, 
        "summary": "Set given preview as main preview of the related entity. ", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/actions/preview-files/{preview_file_id}/update-annotations": {
      "put": {
        "description": "Modifications are applied via three fields:\n* `annotations` to give all the annotations that need to be added.\n\n* `updates` that list annotations that needs to be modified.\n\n* `deletions` to list the IDs of annotations that needs to be removed.\n", 
        "parameters": [
          {
            "in": "path", 
            "name": "preview_file_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Orders of previews changed for a single revision"
          }
        }, 
        "summary": "Allow to modify the annotations stored at the preview level.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/actions/preview-files/{preview_file_id}/update-position": {
      "put": {
        "description": "This preview will be used to illustrate the entity.", 
        "parameters": [
          {
            "in": "path", 
            "name": "preview_file_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Orders of previews changed for a single revision"
          }
        }, 
        "summary": "Allow to change orders of previews for a single revision.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/actions/projects/{project_id}/delete-tasks": {
      "post": {
        "description": "See it as a way to batch delete tasks.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Tasks matching id list given in parameter deleted"
          }
        }, 
        "summary": "Delete tasks matching id list given in parameter.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/projects/{project_id}/set-file-tree": {
      "post": {
        "description": "Template files are located on the server side. Each template has a name which means that you just have to give a name to \"select\" the template to link with the project.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Tree name", 
            "schema": {
              "properties": {
                "tree_name": {
                  "type": "string"
                }
              }, 
              "required": [
                "tree_name"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Template file defined"
          }, 
          "400": {
            "description": "Selected tree not available"
          }
        }, 
        "summary": "Define a template file to use for given project. ", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/actions/projects/{project_id}/task-types/{task_type_id}/assets/create-tasks": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "New task for given asset and task type created"
          }
        }, 
        "summary": "Create a new task for given asset and task type.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/projects/{project_id}/task-types/{task_type_id}/delete-tasks": {
      "delete": {
        "description": "It's mainly used when tasks are created by mistake at the beginning of the project.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "All tasks for given task type and project deleted"
          }
        }, 
        "summary": "Delete all tasks for a given task type and project.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/projects/{project_id}/task-types/{task_type_id}/edits/create-tasks": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "New task for given edit and task type created"
          }
        }, 
        "summary": "Create a new task for given edit and task type.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/projects/{project_id}/task-types/{task_type_id}/shots/create-tasks": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "New task for given shot and task type created"
          }
        }, 
        "summary": "Create a new task for given shot and task type.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/projects/{project_id}/tasks/comment-many": {
      "post": {
        "description": "Each comment requires a text, a task id, a task_status and a person as arguments. This way, comments keep history of status changes. When the comment is created, it updates the task status with given task status.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Given files added to the comment entry as attachments"
          }
        }, 
        "summary": "Create several comments at once.", 
        "tags": [
          "Comments"
        ]
      }
    }, 
    "/actions/tasks/clear-assignation": {
      "put": {
        "parameters": [
          {
            "description": "List of tasks ID and person ID", 
            "in": "body", 
            "name": "Task", 
            "schema": {
              "properties": {
                "person_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "task_ids": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "task_ids"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All assignations removed"
          }
        }, 
        "summary": "Remove all assignations set to given task.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/tasks/{task_id}/assign": {
      "put": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Person ID", 
            "in": "body", 
            "name": "Person", 
            "schema": {
              "properties": {
                "person_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "person_id"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given task assigned to given person"
          }, 
          "400": {
            "description": "Assignee non-existent in database"
          }
        }, 
        "summary": "Assign given task list to given person.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/tasks/{task_id}/comment": {
      "post": {
        "description": "It requires a text, a task_status and a person as arguments. This way, comments keep history of status changes. When the comment is created, it updates the task status with given task status.", 
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "description": "person ID, name, comment, revision and change status of task", 
            "in": "body", 
            "name": "Comment", 
            "schema": {
              "properties": {
                "checklist": {
                  "type": "array"
                }, 
                "comment": {
                  "type": "string"
                }, 
                "created_at": {
                  "example": "Tue, 12 Jul 2022 13:00:00 GMT", 
                  "type": "timestamp"
                }, 
                "person_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "task_status_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "task_status_id"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "New comment created"
          }
        }, 
        "summary": "Create a new comment for given task.", 
        "tags": [
          "Comments"
        ]
      }
    }, 
    "/actions/tasks/{task_id}/comments/{comment_id}/add-attachment": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "comment_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Given files added to the comment entry as attachments"
          }
        }, 
        "summary": "Add given files to the comment entry as attachments.", 
        "tags": [
          "Comments"
        ]
      }
    }, 
    "/actions/tasks/{task_id}/comments/{comment_id}/add-preview": {
      "post": {
        "description": "Revision is automatically set: it is equal to last revision + 1.", 
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "comment_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Preview added to given task"
          }
        }, 
        "summary": "Add a preview to given task.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/tasks/{task_id}/comments/{comment_id}/preview-files/{preview_file_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "comment_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "preview_file_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Preview deleted from given comment"
          }
        }, 
        "summary": "Delete preview from given comment.", 
        "tags": [
          "Tasks"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "comment_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "preview_file_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Preview added to given comment"
          }
        }, 
        "summary": "Add a preview to given comment.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/tasks/{task_id}/time-spents/{date}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "date", 
            "required": true, 
            "schema": {
              "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
              "type": "timestamp"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Time spent on given task by given person"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Get time spent on a given task by a given person.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/tasks/{task_id}/time-spents/{date}/persons/{person_id}": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "date", 
            "required": true, 
            "schema": {
              "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
              "type": "timestamp"
            }
          }, 
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Duration", 
            "schema": {
              "properties": {
                "duration": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Time spent by given person on given task for given day is set"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Set time spent by a person on a task for a given day.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/tasks/{task_id}/time-spents/{date}/persons/{person_id}/add": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "date", 
            "required": true, 
            "schema": {
              "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
              "type": "timestamp"
            }
          }, 
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Duration", 
            "schema": {
              "properties": {
                "duration": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Given timeframe added to time spent by given person on given task for given day"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Add given timeframe to time spent by a person on a task for a given day.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/tasks/{task_id}/to-review": {
      "put": {
        "description": "It creates a new preview file entry and set path from the hard disk.", 
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "description": "person ID, name, comment, revision and change status of task", 
            "in": "body", 
            "name": "Task", 
            "schema": {
              "properties": {
                "change_status": {
                  "type": "boolean"
                }, 
                "comment": {
                  "type": "string"
                }, 
                "name": {
                  "type": "string"
                }, 
                "person_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "revision": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Task status changed to \"to review\""
          }, 
          "400": {
            "description": "Given person not found"
          }
        }, 
        "summary": "Change a task status to \"to review\".  ", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/actions/user/sequences/{sequence_id}/task-types/{task_type_id}/subscribe": {
      "post": {
        "description": "When a user subscribes, he gets notified every time a comment is posted on tasks related to the sequence.", 
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Subscription entry created"
          }
        }, 
        "summary": "Create a subscription entry for given sequence, task type and current user.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/actions/user/sequences/{sequence_id}/task-types/{task_type_id}/unsubscribe": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Subscription entry removed"
          }
        }, 
        "summary": "Remove a subscription entry for given sequence, tasl type and current user.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/actions/user/tasks/{task_id}/subscribe": {
      "post": {
        "description": "When a user subscribes, he gets notified everytime a comment is posted on the task.", 
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Subscription entry created"
          }
        }, 
        "summary": "Create a subscription entry for given task and current user. ", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/actions/user/tasks/{task_id}/unsubscribe": {
      "delete": {
        "description": "The user will no longer receive notifications for this task.", 
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Subscription entry removed"
          }
        }, 
        "summary": "Remove the subscription entry matching given task and current user. ", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/actions/working-files/{working_file_id}/comment": {
      "put": {
        "parameters": [
          {
            "in": "path", 
            "name": "working_file_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Comment", 
            "schema": {
              "properties": {
                "comment": {
                  "type": "string"
                }
              }, 
              "required": [
                "comment"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Comment updated on given working file"
          }
        }, 
        "summary": "Update comment on given working file.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/actions/working-files/{working_file_id}/modified": {
      "put": {
        "parameters": [
          {
            "in": "path", 
            "name": "working_file_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Working file modification date updated"
          }
        }, 
        "summary": "Update working file modification date with current date.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/auth/authenticated": {
      "get": {
        "description": "It can be used by third party tools, especially browser frontend, to know if current user is still logged in.", 
        "responses": {
          "200": {
            "description": "User authenticated"
          }, 
          "401": {
            "description": "Person not found"
          }
        }, 
        "summary": "Returns information if the user is authenticated else it returns a 401 response.", 
        "tags": [
          "Authentification"
        ]
      }
    }, 
    "/auth/change-password": {
      "post": {
        "description": "Prior to modifying the password, it requires to give the current password (to make sure the user changing the password is not someone who stealed the session). The new password requires a confirmation to ensure that the user didn't make a mistake by typing his new password.", 
        "parameters": [
          {
            "description": "The old password, new password and confirmation password of the user", 
            "in": "body", 
            "name": "Credentials", 
            "schema": {
              "properties": {
                "old_password": {
                  "type": "string"
                }, 
                "password": {
                  "type": "string"
                }, 
                "password_2": {
                  "type": "string"
                }
              }, 
              "required": [
                "old_password", 
                "password", 
                "password_2"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Password changed"
          }, 
          "400": {
            "description": "Invalid password or inactive user"
          }
        }, 
        "summary": "Allow the user to change his password.", 
        "tags": [
          "Authentification"
        ]
      }
    }, 
    "/auth/login": {
      "post": {
        "description": "Login is based on email and password. If no user match given email and a destkop ID, it looks in matching the desktop ID with the one stored in database. It is useful for clients that run on desktop tools and that don't know user email.", 
        "parameters": [
          {
            "description": "The email and password of the user", 
            "in": "body", 
            "name": "Credentials", 
            "schema": {
              "properties": {
                "email": {
                  "type": "string"
                }, 
                "password": {
                  "type": "string"
                }
              }, 
              "required": [
                "email", 
                "password"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Login successful"
          }, 
          "400": {
            "description": "Login failed"
          }, 
          "500": {
            "description": "Database not reachable"
          }
        }, 
        "summary": "Log in user by creating and registering auth tokens.", 
        "tags": [
          "Authentification"
        ]
      }
    }, 
    "/auth/logout": {
      "get": {
        "description": "Once logged out, current user cannot access the API anymore.", 
        "responses": {
          "200": {
            "description": "Logout successful"
          }, 
          "500": {
            "description": "Access token not found"
          }
        }, 
        "summary": "Log user out by revoking his auth tokens.", 
        "tags": [
          "Authentification"
        ]
      }
    }, 
    "/auth/refresh-token": {
      "get": {
        "description": "This route allows to make their lifetime long before they get outdated.", 
        "responses": {
          "200": {
            "description": "Access Token"
          }
        }, 
        "summary": "Tokens are considered as outdated every two weeks.", 
        "tags": [
          "Authentification"
        ]
      }
    }, 
    "/auth/register": {
      "post": {
        "parameters": [
          {
            "description": "The email, password, confirmation password, first name and last name of the user", 
            "in": "body", 
            "name": "Credentials", 
            "schema": {
              "properties": {
                "email": {
                  "type": "string"
                }, 
                "first_name": {
                  "type": "string"
                }, 
                "last_name": {
                  "type": "string"
                }, 
                "password": {
                  "type": "string"
                }, 
                "password_2": {
                  "type": "string"
                }
              }, 
              "required": [
                "email", 
                "password", 
                "password_2", 
                "first_name", 
                "last_name"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Registration successful"
          }, 
          "400": {
            "description": "Invalid password or email"
          }
        }, 
        "summary": "Allow a user to register himself to the service.", 
        "tags": [
          "Authentification"
        ]
      }
    }, 
    "/auth/reset-password": {
      "post": {
        "description": "It uses a classic scheme: a token is sent by email to the user. Then he can change his password.", 
        "parameters": [
          {
            "description": "The email of the user", 
            "in": "body", 
            "name": "Email", 
            "schema": {
              "properties": {
                "email": {
                  "type": "string"
                }
              }, 
              "required": [
                "email"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Reset token sent"
          }, 
          "400": {
            "description": "Email not listed in database"
          }
        }, 
        "summary": "Ressource to allow a user to change his password when he forgets it.", 
        "tags": [
          "Authentification"
        ]
      }, 
      "put": {
        "description": "It uses a classic scheme: a token is sent by email to the user. Then he can change his password.", 
        "parameters": [
          {
            "description": "The token, new password and confirmation password of the user", 
            "in": "body", 
            "name": "Credentials", 
            "schema": {
              "properties": {
                "password": {
                  "type": "string"
                }, 
                "password_2": {
                  "type": "string"
                }, 
                "token": {
                  "type": "UUID"
                }
              }, 
              "required": [
                "token", 
                "password", 
                "password_2"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Password reset"
          }, 
          "400": {
            "description": "Invalid password Wrong or expired token Inactive user"
          }
        }, 
        "summary": "Ressource to allow a user to change his password when he forgets it.", 
        "tags": [
          "Authentification"
        ]
      }
    }, 
    "/config": {
      "get": {
        "summary": "Get crisp token.", 
        "tags": [
          "Index"
        ]
      }
    }, 
    "/data/asset-instances/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/asset-instances/{asset_instance_id}/entities/{temporal_entity_id}/output-file-path": {
      "post": {
        "description": "Generate file path based on several parameters: asset instance, output type, task type, revision, mode, name and separator. Revision can be computed automatically as next revision in case no revision is given in parameter.", 
        "parameters": [
          {
            "in": "path", 
            "name": "asset_instance_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "temporal_entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Asset instance, output type, task type, revision, mode, name and separator.", 
            "in": "body", 
            "name": "File", 
            "schema": {
              "properties": {
                "extension": {
                  "type": "string"
                }, 
                "mode": {
                  "default": "output", 
                  "type": "string"
                }, 
                "name": {
                  "default": "main", 
                  "type": "string"
                }, 
                "output_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "representation": {
                  "type": "string"
                }, 
                "revision": {
                  "type": "integer"
                }, 
                "separator": {
                  "default": "/", 
                  "type": "string"
                }, 
                "task_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "output_type_id", 
                "task_type_id"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Output file path generated"
          }, 
          "400": {
            "description": "Malformed file tree"
          }
        }, 
        "summary": "Generate an output file path from file tree template", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/asset-instances/{asset_instance_id}/entities/{temporal_entity_id}/output-files/last-revisions": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_instance_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "temporal_entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Last revisions of output files for given instance grouped by output type and file name"
          }
        }, 
        "summary": "Get last revisions of output files for given instance grouped by output type and file name.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/asset-instances/{asset_instance_id}/entities/{temporal_entity_id}/output-files/new": {
      "post": {
        "description": "Some output files are linked to assets through an instance of this asset for a given shot. Each time a CG artist is satisfied by what he did on a working file, he can create an output file that will be linked to a target instance. It keeps track of the working file at the origin of the output file. An output type is required for better categorization (textures, caches, ...). A task type can be set too to give the department related to the output file.", 
        "parameters": [
          {
            "in": "path", 
            "name": "asset_instance_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "temporal_entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Name, mode, output type ID, task type ID, person ID, working file ID, file status ID, comment, extension, representation, revision, number of elements and separator.", 
            "in": "body", 
            "name": "File", 
            "schema": {
              "properties": {
                "comment": {
                  "type": "string"
                }, 
                "extension": {
                  "type": "string"
                }, 
                "file_status_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "is_sequence": {
                  "default": false, 
                  "type": "boolean"
                }, 
                "mode": {
                  "default": "output", 
                  "type": "string"
                }, 
                "name": {
                  "default": "main", 
                  "type": "string"
                }, 
                "nb_elements": {
                  "default": 1, 
                  "type": "integer"
                }, 
                "output_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "person_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "representation": {
                  "type": "string"
                }, 
                "revision": {
                  "type": "integer"
                }, 
                "sep": {
                  "default": "/", 
                  "type": "string"
                }, 
                "task_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "working_file_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "output_type_id", 
                "task_type_id"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "New output file created"
          }, 
          "400": {
            "description": "Given output file already exists Given person not found Given output type not found"
          }
        }, 
        "summary": "Create new output file linked to assets through an instance of this asset for a given shot.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/asset-instances/{asset_instance_id}/entities/{temporal_entity_id}/output-files/next-revision": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_instance_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "temporal_entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Name, output type ID, task type ID.", 
            "in": "body", 
            "name": "File", 
            "schema": {
              "properties": {
                "name": {
                  "default": "main", 
                  "type": "string"
                }, 
                "output_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "task_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "output_type_id", 
                "task_type_id"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Next revision for given asset instance, output type, task type and name"
          }
        }, 
        "summary": "Get next revision for given asset instance, output type, task type and name.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/asset-instances/{asset_instance_id}/entities/{temporal_entity_id}/output-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_instance_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "temporal_entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All types of output generated for given instance"
          }
        }, 
        "summary": "Return all types of output generated for given instance.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/asset-instances/{asset_instance_id}/entities/{temporal_entity_id}/output-types/{output_type_id}/output-files": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_instance_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "temporal_entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "output_type_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All output files for given asset instance and given output type"
          }
        }, 
        "summary": "Get all output files for given asset instance and given output type.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/asset-instances/{asset_instance_id}/output-files": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_instance_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All output files for given asset instance and given output type"
          }
        }, 
        "summary": "Get all output files for given asset instance and given output type.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/asset-instances/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/asset-types": {
      "get": {
        "responses": {
          "200": {
            "description": "All asset types"
          }
        }, 
        "summary": "Retrieve all asset types (entity types that are not shot, sequence or episode).", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/asset-types/{asset_type_id}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given asset type"
          }
        }, 
        "summary": "Retrieve given asset type.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/assets": {
      "get": {
        "description": "Adds project name and asset type name.<br/>", 
        "responses": {
          "200": {
            "description": "All assets"
          }
        }, 
        "summary": "Retrieve all entities that are not shot or sequence.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/assets/all": {
      "get": {
        "description": "Adds project name and asset type name.<br/>", 
        "responses": {
          "200": {
            "description": "All assets"
          }
        }, 
        "summary": "Retrieve all entities that are not shot or sequence.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/assets/with-tasks": {
      "get": {
        "description": "Adds project name and asset type name and all related tasks. If episode_id is given as parameter, it returns assets not linked to an episode and assets linked to given episode.", 
        "responses": {
          "200": {
            "description": "All assets with tasks"
          }
        }, 
        "summary": "Retrieve all entities that are not shot or sequence.   ", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/assets/{asset_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Given asset deleted"
          }
        }, 
        "summary": "Delete given asset.", 
        "tags": [
          "Assets"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given asset"
          }
        }, 
        "summary": "Retrieve given asset.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/assets/{asset_id}/asset-asset-instances": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All asset instances instantiated inside given asset"
          }
        }, 
        "summary": "Retrieve all asset instances instantiated inside this asset.", 
        "tags": [
          "Assets"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Asset instance created inside given asset"
          }
        }, 
        "summary": "Create an asset instance inside given asset.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/assets/{asset_id}/assets": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All assets for a given asset"
          }
        }, 
        "summary": "Retrieve all assets for a given asset.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/assets/{asset_id}/cast-in": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Casting of given asset"
          }
        }, 
        "summary": "Resource to retrieve the casting of a given asset.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/assets/{asset_id}/casting": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Casting of given asset"
          }
        }, 
        "summary": "Resource to retrieve the casting of a given asset.", 
        "tags": [
          "Assets"
        ]
      }, 
      "put": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Modification of assets linked to given asset"
          }
        }, 
        "summary": "Resource to allow the modification of assets linked to a asset.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/assets/{asset_id}/scene-asset-instances": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All scene asset instances linked to asset"
          }
        }, 
        "summary": "Retrieve all scene asset instances linked to asset.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/assets/{asset_id}/shot-asset-instances": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All shot asset instances linked to asset"
          }
        }, 
        "summary": "Retrieve all shot asset instances linked to asset.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/assets/{asset_id}/task-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All task types related to given asset"
          }
        }, 
        "summary": "Retrieve all task types related to a given asset.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/assets/{asset_id}/tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All tasks related to given shot"
          }
        }, 
        "summary": "Retrieve all tasks related to a given shot.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/attachment-files": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/attachment-files/{attachment_file_id}/file/{file_name}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "attachment_file_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "file_name", 
            "required": true, 
            "schema": {
              "example": "filename", 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Attachment file downloaded"
          }, 
          "404": {
            "description": "Download failed"
          }
        }, 
        "summary": "Download attachment file.", 
        "tags": [
          "Comments"
        ]
      }
    }, 
    "/data/attachment-files/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/comments": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/comments/{instance_id}": {
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/custom-actions/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/custom-actions/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/day-offs/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/day-offs/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/departments": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/departments/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/edits": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "parameters": [
          {
            "in": "query", 
            "name": "project_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All edit entries"
          }
        }, 
        "summary": "Retrieve all edit entries.", 
        "tags": [
          "Edits"
        ]
      }
    }, 
    "/data/edits/all": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "parameters": [
          {
            "in": "query", 
            "name": "project_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All edit entries"
          }
        }, 
        "summary": "Retrieve all edit entries.", 
        "tags": [
          "Edits"
        ]
      }
    }, 
    "/data/edits/with-tasks": {
      "get": {
        "parameters": [
          {
            "in": "query", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All edits and all related tasks."
          }
        }, 
        "summary": "Retrieve all edits, adds project name and all related tasks.", 
        "tags": [
          "Edits"
        ]
      }
    }, 
    "/data/edits/{edit_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "edit_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Given edit deleted"
          }
        }, 
        "summary": "Delete given edit.", 
        "tags": [
          "Edits"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "edit_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given edit"
          }
        }, 
        "summary": "Retrieve given edit.", 
        "tags": [
          "Edits"
        ]
      }
    }, 
    "/data/edits/{edit_id}/preview-files": {
      "get": {
        "description": "It sends them as a dict. Keys are related task type ids and values are arrays of preview for this task type.", 
        "parameters": [
          {
            "in": "path", 
            "name": "edit_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All previews related to given edit"
          }
        }, 
        "summary": "Retrieve all previews related to a given edit. ", 
        "tags": [
          "Edits"
        ]
      }
    }, 
    "/data/edits/{edit_id}/task-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "edit_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All task types related to given edit"
          }
        }, 
        "summary": "Retrieve all task types related to a given edit.", 
        "tags": [
          "Edits"
        ]
      }
    }, 
    "/data/edits/{edit_id}/tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "edit_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All tasks related to given edit"
          }
        }, 
        "summary": "Retrieve all tasks related to a given edit.", 
        "tags": [
          "Edits"
        ]
      }
    }, 
    "/data/edits/{edit_id}/versions": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "edit_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Data versions of given edit"
          }
        }, 
        "summary": "Retrieve data versions of given edit.", 
        "tags": [
          "Edits"
        ]
      }
    }, 
    "/data/entities": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/entities/{entity_id}/news": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All news linked to given entity"
          }
        }, 
        "summary": "Retrieve all news linked to a given entity.", 
        "tags": [
          "Entities"
        ]
      }
    }, 
    "/data/entities/{entity_id}/output-file-path": {
      "post": {
        "description": "Generate file path based on several parameters: entity, output type, task type, revision, mode, name and separator. Revision can be computed automatically as next revision if not given.", 
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Entity, output type, task type, revision, mode, name and separator.", 
            "in": "body", 
            "name": "File", 
            "schema": {
              "properties": {
                "extension": {
                  "type": "string"
                }, 
                "mode": {
                  "default": "output", 
                  "type": "string"
                }, 
                "name": {
                  "default": "main", 
                  "type": "string"
                }, 
                "output_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "representation": {
                  "type": "string"
                }, 
                "revision": {
                  "type": "integer"
                }, 
                "separator": {
                  "default": "/", 
                  "type": "string"
                }, 
                "task_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "output_type_id", 
                "task_type_id"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Output file path generated"
          }, 
          "400": {
            "description": "Malformed file tree"
          }
        }, 
        "summary": "Generate an output file path from file tree template", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/entities/{entity_id}/output-files": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All output files for given asset instance and given output type"
          }
        }, 
        "summary": "Get all output files for given asset instance and given output type.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/entities/{entity_id}/output-files/last-revisions": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Last revisions of output files for given entity grouped by output type and file name"
          }
        }, 
        "summary": "Get last revisions of output files for given entity grouped by output type and file name.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/entities/{entity_id}/output-files/new": {
      "post": {
        "description": "Output files are linked to entities. Each time a CG artist is satisfied by what he did on a working file, he can create an output file that will be linked to a target entity (an asset, a shot, a sequence, ...). It keeps track of the working file at the origin of the output file. An output type is required for better categorization (textures, caches, ...). A task type can be set too to give the department related to the output file. Revision is automatically set.", 
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Name, mode, output type ID, task type ID, person ID, working file ID, file status ID, comment, extension, representation, revision, number of elements and separator.", 
            "in": "body", 
            "name": "File", 
            "schema": {
              "properties": {
                "comment": {
                  "type": "string"
                }, 
                "extension": {
                  "type": "string"
                }, 
                "file_status_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "mode": {
                  "default": "output", 
                  "type": "string"
                }, 
                "name": {
                  "type": "string"
                }, 
                "nb_elements": {
                  "default": 1, 
                  "type": "integer"
                }, 
                "output_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "person_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "representation": {
                  "type": "string"
                }, 
                "revision": {
                  "type": "integer"
                }, 
                "sep": {
                  "default": "/", 
                  "type": "string"
                }, 
                "task_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "working_file_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "output_type_id", 
                "task_type_id"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "New output file created"
          }, 
          "400": {
            "description": "Given output file already exists Given person not found Given output type not found"
          }
        }, 
        "summary": "Create new output file linked to a given entity.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/entities/{entity_id}/output-files/next-revision": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Name, output type ID, task type ID.", 
            "in": "body", 
            "name": "File", 
            "schema": {
              "properties": {
                "name": {
                  "default": "main", 
                  "type": "string"
                }, 
                "output_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "task_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "output_type_id", 
                "task_type_id"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Next revision for given entity, output type, task type and name"
          }
        }, 
        "summary": "Get next revision for given entity, output type, task type and name.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/entities/{entity_id}/output-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All types of output generated for given entity"
          }
        }, 
        "summary": "Return all types of output generated for given entity.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/entities/{entity_id}/output-types/{output_type_id}/output-files": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "output_type_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All output files for given entity and given output type"
          }
        }, 
        "summary": "Get all output files for given entity and given output type.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/entities/{entity_id}/preview-files": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All preview files linked to given entity"
          }
        }, 
        "summary": "Retrieve all preview files linked to a given entity.", 
        "tags": [
          "Entities"
        ]
      }
    }, 
    "/data/entities/{entity_id}/task-types/{task_type_id}/tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Tasks related to given entity asset, episode, sequence, shot or scene"
          }
        }, 
        "summary": "Return tasks related to given entity asset, episode, sequence, shot or scene.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/entities/{entity_id}/time-spents": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All time spents linked to given entity"
          }
        }, 
        "summary": "Retrieve all time spents linked to a given entity.", 
        "tags": [
          "Entities"
        ]
      }
    }, 
    "/data/entities/{entity_id}/working-files": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All working files for given entity and possibly a task and a name"
          }
        }, 
        "summary": "Get all working files for a given entity and possibly a task and a name.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/entities/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/entity-links/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/entity-links/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/entity-types": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/entity-types/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/episodes": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "parameters": [
          {
            "in": "query", 
            "name": "project_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All episode entries"
          }
        }, 
        "summary": "Retrieve all episode entries.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/episodes/with-tasks": {
      "get": {
        "description": "related tasks.<br/>", 
        "parameters": [
          {
            "in": "query", 
            "name": "project_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All episodes"
          }
        }, 
        "summary": "Retrieve all episodes, adds project name and asset type name and all", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/episodes/{episode_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "episode_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Given episode deleted"
          }
        }, 
        "summary": "Delete given episode.", 
        "tags": [
          "Shots"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "episode_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given episode"
          }
        }, 
        "summary": "Retrieve given episode.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/episodes/{episode_id}/asset-tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "episode_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All assets tasks related to given episode"
          }
        }, 
        "summary": "Retrieve all assets tasks related to a given episode.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/episodes/{episode_id}/edit-tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "episode_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All tasks related to given episode"
          }
        }, 
        "summary": "Retrieve all tasks related to a given episode.", 
        "tags": [
          "Edits"
        ]
      }
    }, 
    "/data/episodes/{episode_id}/edits": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "episode_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All efits related to given episode"
          }
        }, 
        "summary": "Retrieve all edits related to a given episode.", 
        "tags": [
          "Edits"
        ]
      }
    }, 
    "/data/episodes/{episode_id}/sequences": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "parameters": [
          {
            "in": "path", 
            "name": "episode_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "query", 
            "name": "project_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All sequence entries for given episode"
          }
        }, 
        "summary": "Retrieve all sequence entries for a given episode.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/episodes/{episode_id}/shot-tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "episode_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All shots tasks related to given episode"
          }
        }, 
        "summary": "Retrieve all shots tasks related to a given episode.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/episodes/{episode_id}/shots": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "episode_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All shots related to given episode"
          }
        }, 
        "summary": "Retrieve all shots related to a given episode.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/episodes/{episode_id}/task-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "episode_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All task types related to given episode"
          }
        }, 
        "summary": "Retrieve all task types related to a given episode.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/episodes/{episode_id}/tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "episode_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All tasks related to given episode"
          }
        }, 
        "summary": "Retrieve all tasks related to a given episode.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/events/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/events/last": {
      "get": {
        "parameters": [
          {
            "in": "body", 
            "name": "Events", 
            "schema": {
              "properties": {
                "after": {
                  "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
                  "type": "timestamp"
                }, 
                "before": {
                  "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
                  "type": "timestamp"
                }, 
                "only_files": {
                  "default": false, 
                  "type": "boolean"
                }, 
                "page_size": {
                  "default": 100, 
                  "example": 100, 
                  "type": "integer"
                }, 
                "project_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All login logs"
          }
        }, 
        "summary": "Retrieve last events.", 
        "tags": [
          "Events"
        ]
      }
    }, 
    "/data/events/login-logs/last": {
      "get": {
        "parameters": [
          {
            "in": "body", 
            "name": "Event", 
            "schema": {
              "properties": {
                "before": {
                  "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
                  "type": "timestamp"
                }, 
                "page_size": {
                  "example": 100, 
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All login logs"
          }
        }, 
        "summary": "Retrieve all login logs.", 
        "tags": [
          "Events"
        ]
      }
    }, 
    "/data/events/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/file-status/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/file-status/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/files/{file_id}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "file_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Information about file"
          }
        }, 
        "summary": "Get information about a file that could be a working file as much as an output file.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/metadata-descriptors/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/metadata-descriptors/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/milestones/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/milestones/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/news/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/news/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/notifications/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/notifications/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/organisations": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/organisations/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/output-files": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/output-files/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/output-types": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/output-types/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/persons": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/persons/day-offs/{year}/{month}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }, 
          {
            "in": "path", 
            "name": "month", 
            "required": true, 
            "schema": {
              "example": "07 (from 01 to 12)", 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All day off recorded for given month"
          }
        }, 
        "summary": "Return all day off recorded for given month.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/new": {
      "post": {
        "description": "Set \"default\" as password. User role can be set but only admins can create admin users.", 
        "parameters": [
          {
            "description": "Email, first and last name, phone, role, desktop login and department of user", 
            "in": "body", 
            "name": "User", 
            "schema": {
              "properties": {
                "departments": {
                  "type": "string"
                }, 
                "desktop_login": {
                  "type": "string"
                }, 
                "email": {
                  "type": "string"
                }, 
                "first_name": {
                  "type": "string"
                }, 
                "last_name": {
                  "type": "string"
                }, 
                "phone": {
                  "example": "06 12 34 56 78", 
                  "type": "integer"
                }, 
                "role": {
                  "type": "string"
                }
              }, 
              "required": [
                "email", 
                "first_name"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "User created"
          }
        }, 
        "summary": "Create a new user in the database. ", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/presence-logs/{month_date}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "month_date", 
            "required": true, 
            "schema": {
              "example": "2022-07", 
              "type": "timestamp"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "CSV file containing the presence logs based on a daily basis"
          }
        }, 
        "summary": "Return a csv file containing the presence logs based on a daily basis.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/time-spents/day-table/{year}/{month}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }, 
          {
            "in": "path", 
            "name": "month", 
            "required": true, 
            "schema": {
              "example": "07 (from 01 to 12)", 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Table giving time spent by user and by day for given year and month"
          }
        }, 
        "summary": "Return a table giving time spent by user and by day for given year and month.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/time-spents/month-table/{year}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Table giving time spent by user and by month for given year"
          }
        }, 
        "summary": "Return a table giving time spent by user and by month for given year.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/time-spents/week-table/{year}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Table giving time spent by user and by week for given year"
          }
        }, 
        "summary": "Return a table giving time spent by user and by week for given year.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/time-spents/year-table/": {
      "get": {
        "responses": {
          "200": {
            "description": "Table giving time spent by user and by month for given year"
          }
        }, 
        "summary": "Return a table giving time spent by user and by month for given year.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{instance_id}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/persons/{person_id}/day-offs/month/{year}/{month}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }, 
          {
            "in": "path", 
            "name": "month", 
            "required": true, 
            "schema": {
              "example": "07 (from 01 to 12)", 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All day off recorded for given month and person"
          }
        }, 
        "summary": "Return all day off recorded for given month and person.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{person_id}/day-offs/week/{year}/{week}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }, 
          {
            "in": "path", 
            "name": "week", 
            "required": true, 
            "schema": {
              "example": "35 (from 01 to 52)", 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All day off recorded for given week and person"
          }
        }, 
        "summary": "Return all day off recorded for given week and person.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{person_id}/day-offs/year/{year}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All day off recorded for given year and person"
          }
        }, 
        "summary": "Return all day off recorded for given year and person.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{person_id}/day-offs/{date}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "date", 
            "required": true, 
            "schema": {
              "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
              "type": "timestamp"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Day off object for given person and date"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Get day off object for given person and date.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{person_id}/desktop-login-logs": {
      "get": {
        "description": "Desktop login logs can only be created by current user.", 
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Desktop login logs"
          }
        }, 
        "summary": "Retrieve desktop login logs.", 
        "tags": [
          "Persons"
        ]
      }, 
      "post": {
        "description": "Set \"default\" as password. User role can be set but only admins can create admin users.", 
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Date", 
            "schema": {
              "properties": {
                "date": {
                  "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
                  "type": "timestamp"
                }
              }, 
              "required": [
                "date"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Desktop login logs created"
          }
        }, 
        "summary": "Create desktop login logs.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{person_id}/done-tasks": {
      "get": {
        "description": "It return only tasks related to open projects.", 
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Tasks assigned to user that are done"
          }
        }, 
        "summary": "Return task assigned to given user of which status has is_done flag sets to true.      ", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/persons/{person_id}/quota-shots/day/{year}/{month}/{day}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }, 
          {
            "in": "path", 
            "name": "month", 
            "required": true, 
            "schema": {
              "example": "07 (from 01 to 12)", 
              "type": "integer"
            }
          }, 
          {
            "in": "path", 
            "name": "day", 
            "required": true, 
            "schema": {
              "example": "12 (from 01 to 31)", 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Ended shots used for quota calculation of this day"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Get ended shots used for quota calculation of this day.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{person_id}/quota-shots/month/{year}/{month}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }, 
          {
            "in": "path", 
            "name": "month", 
            "required": true, 
            "schema": {
              "example": "07 (from 01 to 12)", 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Ended shots used for quota calculation of this month"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Get ended shots used for quota calculation of this month.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{person_id}/quota-shots/week/{year}/{week}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }, 
          {
            "in": "path", 
            "name": "week", 
            "required": true, 
            "schema": {
              "example": "35 (from 01 to 52)", 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Ended shots used for quota calculation of this week"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Get ended shots used for quota calculation of this week.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{person_id}/related-tasks/{task_type_id}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All Tasks for given task type"
          }
        }, 
        "summary": "For all entities assigned to given person (that have at least one task assigned to given person), returns all tasks for given task type.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/persons/{person_id}/tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Tasks assigned to user that are not done"
          }
        }, 
        "summary": "Return task assigned to given user of which status has is_done flag sets to false.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/persons/{person_id}/time-spents/day/{year}/{month}/{day}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }, 
          {
            "in": "path", 
            "name": "month", 
            "required": true, 
            "schema": {
              "example": "07 (from 01 to 12)", 
              "type": "integer"
            }
          }, 
          {
            "in": "path", 
            "name": "day", 
            "required": true, 
            "schema": {
              "example": "12 (from 01 to 31)", 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Aggregated time spents for given person and day"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Get aggregated time spents for given person and day.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{person_id}/time-spents/month/{year}/{month}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }, 
          {
            "in": "path", 
            "name": "month", 
            "required": true, 
            "schema": {
              "example": "07 (from 01 to 12)", 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Aggregated time spents for given person and month"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Get aggregated time spents for given person and month.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{person_id}/time-spents/week/{year}/{week}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }, 
          {
            "in": "path", 
            "name": "week", 
            "required": true, 
            "schema": {
              "example": "35 (from 01 to 52)", 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Aggregated time spents for given person and week"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Get aggregated time spents for given person and week.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{person_id}/time-spents/year/{year}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "year", 
            "required": true, 
            "schema": {
              "example": 2022, 
              "type": "integer"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Aggregated time spents for given person and year"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Get aggregated time spents for given person and year.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/persons/{person_id}/time-spents/{date}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "date", 
            "required": true, 
            "schema": {
              "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
              "type": "timestamp"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Time spents for given person and date"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Get time spents for given person and date.", 
        "tags": [
          "Persons"
        ]
      }
    }, 
    "/data/playlists/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/playlists/entities/{entity_id}/preview-files": {
      "get": {
        "description": "It sends them as a dict. Keys are related task type ids and values are arrays of preview for this task type.", 
        "parameters": [
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All previews related to given entity"
          }
        }, 
        "summary": "Retrieve all previews related to a given entity.", 
        "tags": [
          "Playlists"
        ]
      }
    }, 
    "/data/playlists/preview-files/running": {
      "get": {
        "responses": {
          "200": {
            "description": "All preview files from open productions with states equals to processing or broken"
          }
        }, 
        "summary": "Retrieve all preview files from open productions with states equals to processing or broken.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/data/playlists/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/playlists/{playlist_id}/build/mp4": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "playlist_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given playlist built as mp4 movie"
          }
        }, 
        "summary": "Build given playlist as mp4 movie.", 
        "tags": [
          "Playlists"
        ]
      }
    }, 
    "/data/playlists/{playlist_id}/download/zip": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "playlist_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given playlist downloaded as zip"
          }
        }, 
        "summary": "Download given playlist as zip.", 
        "tags": [
          "Playlists"
        ]
      }
    }, 
    "/data/playlists/{playlist_id}/jobs/{build_job_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "playlist_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "build_job_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Given build job removed"
          }
        }, 
        "summary": "Remove given build job related to given playlist. ", 
        "tags": [
          "Playlists"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "playlist_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "build_job_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Build job related to given playlist"
          }
        }, 
        "summary": "Retrieve build job related to given playlist. ", 
        "tags": [
          "Playlists"
        ]
      }
    }, 
    "/data/playlists/{playlist_id}/jobs/{build_job_id}/build/mp4": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "playlist_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "build_job_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given playlist downloaded as mp4"
          }, 
          "400": {
            "description": "Build not finished"
          }
        }, 
        "summary": "Download given playlist as mp4 after given build job is finished.", 
        "tags": [
          "Playlists"
        ]
      }
    }, 
    "/data/preview-files": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/preview-files/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/project-status": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/project-status/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/projects": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/projects/all": {
      "get": {
        "description": "Ensure that user has at least the manager level before that.", 
        "responses": {
          "200": {
            "description": "All projects listed in database"
          }
        }, 
        "summary": "Return all projects listed in database. ", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/open": {
      "get": {
        "description": "Most of the time, past projects are not needed.", 
        "responses": {
          "200": {
            "description": "All running projects"
          }
        }, 
        "summary": "Return the list of projects currently running.", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/projects/{project_id}/asset-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All asset types for given project"
          }
        }, 
        "summary": "Retrieve all asset types for given project.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/projects/{project_id}/asset-types/{asset_type_id}/assets": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "asset_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All assets for given project and entity type"
          }
        }, 
        "summary": "Retrieve all assets for given project and entity type.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/projects/{project_id}/asset-types/{asset_type_id}/assets/new": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "asset_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Name, description, data and ID of asset", 
            "in": "body", 
            "name": "Asset", 
            "schema": {
              "properties": {
                "data": {
                  "type": "string"
                }, 
                "description": {
                  "type": "string"
                }, 
                "name": {
                  "type": "string"
                }, 
                "source_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "name", 
                "description", 
                "data", 
                "source_id"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "New asset resource created"
          }
        }, 
        "summary": "Create new asset resource.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/projects/{project_id}/asset-types/{asset_type_id}/casting": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "asset_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Casting of assets from given asset type"
          }
        }, 
        "summary": "Resource to retrieve the casting of assets from given asset type.", 
        "tags": [
          "Breakdown"
        ]
      }
    }, 
    "/data/projects/{project_id}/assets": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All assets for given project"
          }
        }, 
        "summary": "Retrieve all assets for given project.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/projects/{project_id}/attachment-files": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All attachment files related to given project"
          }
        }, 
        "summary": "Return all attachment files related to given project.", 
        "tags": [
          "Comments"
        ]
      }
    }, 
    "/data/projects/{project_id}/build-jobs": {
      "get": {
        "description": "It's mainly used for synchronisation purpose.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All build jobs related to given project"
          }
        }, 
        "summary": "Retrieve all build jobs related to given project. ", 
        "tags": [
          "Playlists"
        ]
      }
    }, 
    "/data/projects/{project_id}/comments": {
      "get": {
        "description": "It's mainly used for synchronisation purpose.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All comments to tasks related to given project"
          }
        }, 
        "summary": "Retrieve all comments to tasks related to given project.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/projects/{project_id}/edits": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All edits related to given project"
          }
        }, 
        "summary": "Retrieve all edits related to a given project.", 
        "tags": [
          "Edits"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Name and description of edit, data and ID of episode.", 
            "in": "body", 
            "name": "Edit", 
            "schema": {
              "properties": {
                "data": {
                  "type": "dictionary"
                }, 
                "description": {
                  "type": "string"
                }, 
                "episode_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "name": {
                  "type": "string"
                }
              }, 
              "required": [
                "name"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Edit created for given project"
          }
        }, 
        "summary": "Create an edit for given project.", 
        "tags": [
          "Edits"
        ]
      }
    }, 
    "/data/projects/{project_id}/entities/{entity_id}/casting": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Casting of given entity"
          }
        }, 
        "summary": "Resource to retrieve the casting of a given entity.", 
        "tags": [
          "Breakdown"
        ]
      }, 
      "put": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "entity_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Modification of assets linked to an entity"
          }
        }, 
        "summary": "Resource to allow the modification of assets linked to an entity.", 
        "tags": [
          "Breakdown"
        ]
      }
    }, 
    "/data/projects/{project_id}/entity-links": {
      "get": {
        "description": "It's mainly used for synchronisation purpose.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All entity links related to given project"
          }
        }, 
        "summary": "Retrieve all entity links related to given project.", 
        "tags": [
          "Breakdown"
        ]
      }
    }, 
    "/data/projects/{project_id}/entity-links/{entity_link_id}": {
      "delete": {
        "description": "It's mainly used for synchronisation purpose.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "entity_link_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Entity link deleted"
          }
        }, 
        "summary": "Delete given entity link.", 
        "tags": [
          "Breakdown"
        ]
      }
    }, 
    "/data/projects/{project_id}/episodes": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All episodes related to given project"
          }
        }, 
        "summary": "Retrieve all episodes related to a given project.", 
        "tags": [
          "Shots"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Name of episode", 
            "in": "body", 
            "name": "Episode", 
            "schema": {
              "properties": {
                "name": {
                  "type": "string"
                }
              }, 
              "required": [
                "name"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Episode created for given project"
          }
        }, 
        "summary": "Create an episode for given project.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/projects/{project_id}/episodes/casting": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Casting of episodes"
          }
        }, 
        "summary": "Resource to retrieve the casting of episodes.", 
        "tags": [
          "Breakdown"
        ]
      }
    }, 
    "/data/projects/{project_id}/episodes/retake-stats": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Number of tasks by status, task types and episodes for given project"
          }
        }, 
        "summary": "Retrieve number of tasks by status, task_types and episodes for given project.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/projects/{project_id}/episodes/stats": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Number of tasks by status, task types and episodes for given project"
          }
        }, 
        "summary": "Retrieve number of tasks by status, task_types and episodes for given project.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/projects/{project_id}/episodes/{episode_id}/playlists": {
      "get": {
        "description": "The full list is returned because the number of playlists in an episode is not that big.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "episode_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All playlists related to given episode"
          }
        }, 
        "summary": "Retrieve all playlists related to given episode. ", 
        "tags": [
          "Playlists"
        ]
      }
    }, 
    "/data/projects/{project_id}/metadata-descriptors": {
      "get": {
        "description": "It serves to describe extra fields listed in the data attribute of entities.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All metadata descriptors"
          }
        }, 
        "summary": "Get all metadata descriptors", 
        "tags": [
          "Projects"
        ]
      }, 
      "post": {
        "description": "It serves to describe extra fields listed in the data attribute of entities.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Create a new metadata descriptor"
          }
        }, 
        "summary": "Create a new metadata descriptor", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/metadata-descriptors/{descriptor_id}": {
      "delete": {
        "description": "Descriptors serve to describe extra fields listed in the data attribute of entities.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "descriptor_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Metadata descriptor deleted"
          }
        }, 
        "summary": "Delete a metadata descriptor.", 
        "tags": [
          "Projects"
        ]
      }, 
      "get": {
        "description": "Descriptors serve to describe extra fields listed in the data attribute of entities.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "descriptor_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Metadata descriptor"
          }
        }, 
        "summary": "Get a metadata descriptor.", 
        "tags": [
          "Projects"
        ]
      }, 
      "put": {
        "description": "Descriptors serve to describe extra fields listed in the data attribute of entities.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "descriptor_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Metadata descriptor updated"
          }
        }, 
        "summary": "Update a metadata descriptor.", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/milestones": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All milestones of given production"
          }
        }, 
        "summary": "Retrieve milestones for given production", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/news": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Filter News", 
            "schema": {
              "properties": {
                "after": {
                  "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
                  "type": "timestamp"
                }, 
                "before": {
                  "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
                  "type": "timestamp"
                }, 
                "only_preview": {
                  "default": false, 
                  "type": "boolean"
                }, 
                "page": {
                  "example": 1, 
                  "type": "integer"
                }, 
                "page_size": {
                  "example": 50, 
                  "type": "integer"
                }, 
                "person_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "task_status_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "task_type_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All news related to given project"
          }
        }, 
        "summary": "Retrieve all news related to a given project", 
        "tags": [
          "News"
        ]
      }
    }, 
    "/data/projects/{project_id}/news/{news_id}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "news_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Single given news related to given project"
          }
        }, 
        "summary": "Retrieve a single given news related to a given project", 
        "tags": [
          "News"
        ]
      }
    }, 
    "/data/projects/{project_id}/notifications": {
      "get": {
        "description": "It's mainly used for synchronisation purpose.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All notifications to tasks related to given project"
          }
        }, 
        "summary": "Retrieve all notifications to tasks related to given project.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/projects/{project_id}/playlists": {
      "get": {
        "description": "Result is paginated and can be sorted.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All playlists related to given project"
          }
        }, 
        "summary": "Retrieve all playlists related to given project. ", 
        "tags": [
          "Playlists"
        ]
      }
    }, 
    "/data/projects/{project_id}/playlists/all": {
      "get": {
        "description": "It's mainly used for synchronisation purpose.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All playlists related to given project"
          }
        }, 
        "summary": "Retrieve all playlists related to given project. ", 
        "tags": [
          "Playlists"
        ]
      }
    }, 
    "/data/projects/{project_id}/playlists/temp": {
      "post": {
        "description": "It's mainly used for synchronisation purpose.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All playlists related to given project"
          }
        }, 
        "summary": "Retrieve all playlists related to given project. ", 
        "tags": [
          "Playlists"
        ]
      }
    }, 
    "/data/projects/{project_id}/playlists/{playlist_id}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "playlist_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All playlists related to given project"
          }
        }, 
        "summary": "Retrieve all playlists related to given project. ", 
        "tags": [
          "Playlists"
        ]
      }
    }, 
    "/data/projects/{project_id}/preview-files": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Preview files related to given project"
          }
        }, 
        "summary": "Preview files related to a given project.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/projects/{project_id}/quotas/{task_type_id}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Quotas statistics for shots"
          }
        }, 
        "summary": "Retrieve quotas statistics for shots.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/projects/{project_id}/scenes": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All shots related to given project"
          }
        }, 
        "summary": "Retrieve all shots related to a given project.", 
        "tags": [
          "Shots"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Name of shot and ID of sequence", 
            "in": "body", 
            "name": "Shot", 
            "schema": {
              "properties": {
                "name": {
                  "type": "string"
                }, 
                "sequence_id": {
                  "type": "UUID"
                }
              }, 
              "required": [
                "name", 
                "sequence_id"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Shot created for given project"
          }
        }, 
        "summary": "Create a shot for given project.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/projects/{project_id}/schedule-items": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All schedule items of given production"
          }
        }, 
        "summary": "Retrieve schedule items for given production", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/schedule-items/task-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All task types schedule items of given production"
          }
        }, 
        "summary": "Retrieve task type schedule items for given production", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/schedule-items/{task_type_id}/asset-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All asset types schedule items for given task type"
          }
        }, 
        "summary": "Retrieve asset types schedule items for given task type", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/schedule-items/{task_type_id}/episodes": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All episodes schedule items for given task type"
          }
        }, 
        "summary": "Retrieve episodes schedule items for given task type", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/schedule-items/{task_type_id}/sequences": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All sequences schedule items for given task type"
          }
        }, 
        "summary": "Retrieve sequences schedule items for given task type", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/sequences": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All sequences related to given project"
          }
        }, 
        "summary": "Retrieve all sequences related to a given project.", 
        "tags": [
          "Shots"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Name and ID of episode", 
            "in": "body", 
            "name": "Sequence", 
            "schema": {
              "properties": {
                "episode_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "name": {
                  "type": "string"
                }
              }, 
              "required": [
                "name", 
                "episode_id"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Sequence created for given project"
          }
        }, 
        "summary": "Create a sequence for given project.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/projects/{project_id}/sequences/{sequence_id}/casting": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Casting of shots from given sequence"
          }
        }, 
        "summary": "Resource to retrieve the casting of shots from given sequence.", 
        "tags": [
          "Breakdown"
        ]
      }
    }, 
    "/data/projects/{project_id}/settings/asset-types": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Asset type added to production"
          }
        }, 
        "summary": "Add an asset type linked to a production.", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/settings/asset-types/{asset_type_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "asset_type_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Asset type removed from production"
          }
        }, 
        "summary": "Remove an asset type from a production.", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/settings/status-automations": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Status automation linked to production"
          }
        }, 
        "summary": "Get a status automation linked to a production.", 
        "tags": [
          "Projects"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Status automation added to production"
          }
        }, 
        "summary": "Add a status automation linked to a production.", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/settings/status-automations/{status_automation_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "status_automation_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Status automation removed from production"
          }
        }, 
        "summary": "Remove a status automation from a production.", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/settings/task-status": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Task statuses linked to production"
          }
        }, 
        "summary": "Return task statuses linked to a production", 
        "tags": [
          "Projects"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Task type added to production"
          }
        }, 
        "summary": "Add a task type linked to a production.", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/settings/task-status/{task_status_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_status_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Task status removed from production"
          }
        }, 
        "summary": "Remove a task status from a production.", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/settings/task-types": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Asset type added to production"
          }
        }, 
        "summary": "Add an task type linked to a production.", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/settings/task-types/{task_type_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Task type removed from production"
          }
        }, 
        "summary": "Remove a task type from a production.", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/shots": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All shots related to given project"
          }
        }, 
        "summary": "Retrieve all shots related to a given project.", 
        "tags": [
          "Shots"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "description": "ID of sequence and name, description, data, number of frames and ID of asset", 
            "in": "body", 
            "name": "Shot", 
            "schema": {
              "properties": {
                "data": {
                  "type": "string"
                }, 
                "description": {
                  "type": "string"
                }, 
                "name": {
                  "type": "string"
                }, 
                "nb_frames": {
                  "type": "integer"
                }, 
                "sequence_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "name", 
                "description", 
                "data", 
                "sequence_id", 
                "nb_frames"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Shot created for given project"
          }
        }, 
        "summary": "Create a shot for given project.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/projects/{project_id}/subscriptions": {
      "get": {
        "description": "It's mainly used for synchronisation purpose.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All subcriptions to tasks related to given project"
          }
        }, 
        "summary": "Retrieve all subcriptions to tasks related to given project.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/projects/{project_id}/task-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Task types linked to the production"
          }
        }, 
        "summary": "Retrieve task types linked to the production        ", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/tasks": {
      "get": {
        "description": "It's mainly used for synchronisation purpose.", 
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All tasks related to given project"
          }
        }, 
        "summary": "Retrieve all tasks related to given project.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/projects/{project_id}/team": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "People listed in a production team"
          }
        }, 
        "summary": "Return the people listed in a production team.", 
        "tags": [
          "Projects"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Person added to production team"
          }
        }, 
        "summary": "Manage the people listed in a production team.", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/team/{person_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "person_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Person removed from production team"
          }
        }, 
        "summary": "Remove people listed in a production team.", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/projects/{project_id}/time-spents": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All time spents of given production"
          }
        }, 
        "summary": "Retrieve time spents for given production", 
        "tags": [
          "Projects"
        ]
      }
    }, 
    "/data/scenes/all": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "parameters": [
          {
            "in": "query", 
            "name": "project_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All scene entries"
          }
        }, 
        "summary": "Retrieve all scene entries.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/scenes/with-tasks": {
      "get": {
        "description": "related tasks.<br/>", 
        "parameters": [
          {
            "in": "query", 
            "name": "project_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All scenes"
          }
        }, 
        "summary": "Retrieve all scenes, adds project name and asset type name and all", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/scenes/{scene_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "scene_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Given scene deleted"
          }
        }, 
        "summary": "Delete given scene.", 
        "tags": [
          "Shots"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "scene_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given scene"
          }
        }, 
        "summary": "Retrieve given scene.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/scenes/{scene_id}/asset-instances": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "scene_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All asset instances linked to given scene"
          }
        }, 
        "summary": "Retrieve all asset instances linked to scene.", 
        "tags": [
          "Breakdown"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "scene_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Asset instances created on given scene"
          }
        }, 
        "summary": "Create an asset instance on given scene.", 
        "tags": [
          "Breakdown"
        ]
      }
    }, 
    "/data/scenes/{scene_id}/camera-instances": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "scene_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "All camera instances linked to scene"
          }
        }, 
        "summary": "Retrieve all camera instances linked to scene.", 
        "tags": [
          "Breakdown"
        ]
      }
    }, 
    "/data/scenes/{scene_id}/shots": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "scene_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All shots that come from given scene"
          }
        }, 
        "summary": "Retrieve all shots that come from given scene.", 
        "tags": [
          "Shots"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "scene_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "description": "ID of shot", 
            "in": "body", 
            "name": "Shot", 
            "schema": {
              "properties": {
                "shot_id": {
                  "type": "UUID"
                }
              }, 
              "required": [
                "shot_id"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given scene marked as source of given shot"
          }
        }, 
        "summary": "Mark given scene as source of given shot.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/scenes/{scene_id}/shots/{shot_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "scene_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Given shot deleted from given scene"
          }
        }, 
        "summary": "Delete given shot from given scene.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/scenes/{scene_id}/task-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "scene_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All task types related to given scene"
          }
        }, 
        "summary": "Retrieve all task types related to a given scene.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/scenes/{scene_id}/tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "scene_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All tasks related to given scene"
          }
        }, 
        "summary": "Retrieve all tasks related to a given scene.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/schedule-items/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/schedule-items/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/search": {
      "post": {
        "parameters": [
          {
            "in": "query", 
            "name": "query", 
            "required": true, 
            "schema": {
              "example": "name of asset", 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Resource"
          }
        }, 
        "summary": "Search for resource", 
        "tags": [
          "Search"
        ]
      }
    }, 
    "/data/search-filters/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/search-filters/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/sequences": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "parameters": [
          {
            "in": "query", 
            "name": "episode_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All sequence entries"
          }
        }, 
        "summary": "Retrieve all sequence entries.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/sequences/with-tasks": {
      "get": {
        "description": "related tasks.<br/>", 
        "parameters": [
          {
            "in": "query", 
            "name": "project_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All sequences"
          }
        }, 
        "summary": "Retrieve all sequences, adds project name and asset type name and all", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/sequences/{sequence_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Given sequence deleted"
          }
        }, 
        "summary": "Delete given sequence.", 
        "tags": [
          "Shots"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given sequence"
          }
        }, 
        "summary": "Retrieve given sequence.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/sequences/{sequence_id}/scenes": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All scenes related to given sequence"
          }
        }, 
        "summary": "Retrieve all scenes related to a given sequence.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/sequences/{sequence_id}/shot-tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All task types related to given sequence"
          }
        }, 
        "summary": "Retrieve all tasks related to a given sequence.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/sequences/{sequence_id}/shots": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "query", 
            "name": "project_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All shot entries for given sequence"
          }
        }, 
        "summary": "Retrieve all shot entries for a given sequence.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/sequences/{sequence_id}/task-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All task types related to given shot"
          }
        }, 
        "summary": "Retrieve all task types related to a given shot.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/sequences/{sequence_id}/tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All tasks related to given shot"
          }
        }, 
        "summary": "Retrieve all tasks related to a given shot.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/shots": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "parameters": [
          {
            "in": "query", 
            "name": "sequence_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "query", 
            "name": "project_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "query", 
            "name": "parent_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All shot entries"
          }
        }, 
        "summary": "Retrieve all shot entries.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/shots/all": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "parameters": [
          {
            "in": "query", 
            "name": "sequence_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "query", 
            "name": "project_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "query", 
            "name": "parent_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All shot entries"
          }
        }, 
        "summary": "Retrieve all shot entries.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/shots/with-tasks": {
      "get": {
        "parameters": [
          {
            "in": "query", 
            "name": "project_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All shots"
          }
        }, 
        "summary": "Retrieve all shots, adds project name and asset type name and all related tasks.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/shots/{shot_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Given shot deleted"
          }
        }, 
        "summary": "Delete given shot.", 
        "tags": [
          "Shots"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given shot"
          }
        }, 
        "summary": "Retrieve given shot.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/shots/{shot_id}/asset-instances": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All assets linked to shot"
          }
        }, 
        "summary": "Retrieve all asset instances linked to shot.", 
        "tags": [
          "Breakdown"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Asset instance added to given shot"
          }
        }, 
        "summary": "Add an asset instance to given shot.", 
        "tags": [
          "Breakdown"
        ]
      }
    }, 
    "/data/shots/{shot_id}/asset-instances/{asset_instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "asset_instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Asset instance removed from given shot"
          }
        }, 
        "summary": "Remove an asset instance from given shot.", 
        "tags": [
          "Breakdown"
        ]
      }
    }, 
    "/data/shots/{shot_id}/asset-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All asset shots for given shot"
          }
        }, 
        "summary": "Retrieve all asset shots for given shot.", 
        "tags": [
          "Assets"
        ]
      }
    }, 
    "/data/shots/{shot_id}/assets": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All assets for given shot"
          }
        }, 
        "summary": "Retrieve all assets for a given shot.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/shots/{shot_id}/preview-files": {
      "get": {
        "description": "It sends them as a dict. Keys are related task type ids and values are arrays of preview for this task type.", 
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All previews related to given episode"
          }
        }, 
        "summary": "Retrieve all previews related to a given shot.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/shots/{shot_id}/task-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All task types related to given shot"
          }
        }, 
        "summary": "Retrieve all task types related to a given shot.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/shots/{shot_id}/tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All tasks related to given shot"
          }
        }, 
        "summary": "Retrieve all tasks related to a given shot.", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/shots/{shot_id}/versions": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Data versions of given shot"
          }
        }, 
        "summary": "Retrieve data versions of given shot.        ", 
        "tags": [
          "Shots"
        ]
      }
    }, 
    "/data/softwares": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/softwares/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/status-automations/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/status-automations/{instance_id}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/subscriptions/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/subscriptions/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/task-status": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/task-status/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/task-types": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/task-types/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/tasks": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/tasks/{instance_id}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/tasks/{task_id}/attachment-files": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "All attachment files related to given task"
          }
        }, 
        "summary": "Return all attachment files related to given task.", 
        "tags": [
          "Comments"
        ]
      }
    }, 
    "/data/tasks/{task_id}/comments": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Comments linked to given task"
          }
        }, 
        "summary": "Return comments linked to given task.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/tasks/{task_id}/comments/{comment_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "comment_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Comment corresponding at given ID deleted"
          }
        }, 
        "summary": "Delete a comment corresponding at given ID.", 
        "tags": [
          "Tasks"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "comment_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Comment corresponding at given ID"
          }
        }, 
        "summary": "Get comment corresponding at given ID.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/tasks/{task_id}/comments/{comment_id}/ack": {
      "post": {
        "description": "If it's already acknowledged, remove acknowledgement.", 
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "comment_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Comment acknowledged"
          }
        }, 
        "summary": "Acknowledge given comment.", 
        "tags": [
          "Comments"
        ]
      }
    }, 
    "/data/tasks/{task_id}/comments/{comment_id}/reply": {
      "post": {
        "description": "Add comment to its replies list.", 
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "comment_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Reply to given comment"
          }
        }, 
        "summary": "Reply to given comment.", 
        "tags": [
          "Comments"
        ]
      }
    }, 
    "/data/tasks/{task_id}/comments/{comment_id}/reply/{reply_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "comment_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "reply_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given comment reply deleted"
          }
        }, 
        "summary": "Delete given comment reply.", 
        "tags": [
          "Comments"
        ]
      }
    }, 
    "/data/tasks/{task_id}/full": {
      "get": {
        "description": "Full details for assignees, full details for task type, full details for task status, etc.", 
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Task with many information"
          }
        }, 
        "summary": "Return a task with many information.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/tasks/{task_id}/previews": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Previews linked to given task"
          }
        }, 
        "summary": "Return previews linked to given task.", 
        "tags": [
          "Tasks"
        ]
      }
    }, 
    "/data/tasks/{task_id}/working-file-path": {
      "post": {
        "description": "Generate file path based on several parameters: task, software, mode, revision and separator. Revision can be computed automatically as next revision if not given.", 
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Name, software, mode, revision and separator.", 
            "in": "body", 
            "name": "File", 
            "schema": {
              "properties": {
                "comment": {
                  "type": "string"
                }, 
                "mode": {
                  "default": "working", 
                  "type": "string"
                }, 
                "name": {
                  "default": "main", 
                  "type": "string"
                }, 
                "revision": {
                  "type": "integer"
                }, 
                "separator": {
                  "default": "/", 
                  "type": "string"
                }, 
                "software_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Working file path generated"
          }, 
          "400": {
            "description": "Malformed file tree"
          }
        }, 
        "summary": "Generate a working file path from file tree template.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/tasks/{task_id}/working-files": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Last working files revision for each file name for given task"
          }
        }, 
        "summary": "Return last working files revision for each file name for given task.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/tasks/{task_id}/working-files/last-revisions": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Last working files revision for each file name for given task"
          }
        }, 
        "summary": "Return last working files revision for each file name for given task.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/tasks/{task_id}/working-files/new": {
      "post": {
        "description": "A working file is a file used to produce output files. It is the file the CG artist is working on. It is versioned, tied to a task and a software and requires a comment each time it is created. A path is generated for each file created. The path format is defined in the file tree template file.", 
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }, 
          {
            "description": "Name, mode, description, comment, person ID, software ID, revision and separator.", 
            "in": "body", 
            "name": "File", 
            "schema": {
              "properties": {
                "comment": {
                  "type": "string"
                }, 
                "description": {
                  "type": "string"
                }, 
                "mode": {
                  "default": "working", 
                  "type": "string"
                }, 
                "name": {
                  "type": "string"
                }, 
                "person_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "revision": {
                  "type": "integer"
                }, 
                "sep": {
                  "default": "/", 
                  "type": "string"
                }, 
                "software_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }
              }, 
              "required": [
                "name"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "New working file created"
          }, 
          "400": {
            "description": "Given working file already exists"
          }
        }, 
        "summary": "Create new working file.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/data/time-spents/": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/time-spents/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/user/assets/{asset_id}/task-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Task types related to given asset for current user"
          }
        }, 
        "summary": "Return task types related to given asset for current user.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/assets/{asset_id}/tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "asset_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Tasks related to given asset for current user"
          }
        }, 
        "summary": "Return tasks related to given asset for current user.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/context": {
      "get": {
        "responses": {
          "200": {
            "description": "Context to properly run a full app connected to the API"
          }
        }, 
        "summary": "Return context required to properly run a full app connected to the API (like the Kitsu web client).", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/day-offs/{date}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "date", 
            "required": true, 
            "schema": {
              "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Day off object for current user and given date"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Get day off object for current user and given date.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/desktop-login-logs": {
      "get": {
        "responses": {
          "200": {
            "description": "Desktop login logs"
          }
        }, 
        "summary": "Retrieve desktop login logs.", 
        "tags": [
          "User"
        ]
      }, 
      "post": {
        "description": "Desktop login logs can only be created by current user.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Date", 
            "schema": {
              "properties": {
                "date": {
                  "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
                  "type": "timestamp"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Desktop login logs created"
          }
        }, 
        "summary": "Create desktop login logs.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/done-tasks": {
      "get": {
        "description": "It returns only tasks of open projects.", 
        "responses": {
          "200": {
            "description": "Finished tasks currently assigned to current user"
          }
        }, 
        "summary": "Return tasks currently assigned to current user and of which status has is_done attribute set to true.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/entities/{entity_id}/task-types/{task_type_id}/subscribed": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "True if current user has subscribed to given sequence and task type, False otherwise"
          }
        }, 
        "summary": "Return true if current user has subscribed to given sequence and task type. ", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/filters": {
      "get": {
        "responses": {
          "200": {
            "description": "Filters for current user and only for open projects"
          }
        }, 
        "summary": "Retrieve filters for current user and only for open projects.", 
        "tags": [
          "User"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "description": "Name, query, list type, project id and entity type", 
            "in": "body", 
            "name": "Filter", 
            "schema": {
              "properties": {
                "entity_type": {
                  "type": "string"
                }, 
                "list_type": {
                  "type": "string"
                }, 
                "name": {
                  "type": "string"
                }, 
                "project_id": {
                  "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
                  "type": "UUID"
                }, 
                "query": {
                  "type": "string"
                }
              }, 
              "required": [
                "name", 
                "query", 
                "list_type"
              ], 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Filter for current user and only for open projects created"
          }
        }, 
        "summary": "Create filter for current user and only for open projects.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/filters/{filter_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "filter_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Given filter deleted"
          }
        }, 
        "summary": "Delete given filter if it's owned by current user.", 
        "tags": [
          "User"
        ]
      }, 
      "put": {
        "parameters": [
          {
            "in": "path", 
            "name": "filter_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Given filter updated"
          }
        }, 
        "summary": "Update given filter if it's owned by current user.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/notifications": {
      "get": {
        "parameters": [
          {
            "in": "body", 
            "name": "Date", 
            "schema": {
              "properties": {
                "after": {
                  "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
                  "type": "timestamp"
                }, 
                "before": {
                  "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
                  "type": "timestamp"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Last 100 user notifications"
          }
        }, 
        "summary": "Return last 100 user notifications.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/notifications/{notification_id}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "notification_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Notification matching given ID"
          }
        }, 
        "summary": "Return notification matching given id, only if it's a notification that belongs to current user.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/projects/open": {
      "get": {
        "responses": {
          "200": {
            "description": "Open projects for which the user has at least one task assigned"
          }
        }, 
        "summary": "Return open projects for which the user has at least one task assigned.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/projects/{project_id}/asset-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Asset types related to given project"
          }
        }, 
        "summary": "Return asset types related to given project if the current user has access to it.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/projects/{project_id}/asset-types/{asset_type_id}/assets": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "asset_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Assets of which type is given asset type and are listed in given project"
          }
        }, 
        "summary": "Return assets of which type is given asset type and are listed in given project if user has access to this project.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/projects/{project_id}/episodes": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Episodes related to given project"
          }
        }, 
        "summary": "Return episodes related to given project if the current user has access to it.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/projects/{project_id}/sequences": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Sequences related to given project"
          }
        }, 
        "summary": "Return sequences related to given project if the current user has access to it.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/projects/{project_id}/task-types/{task_type_id}/sequence-subscriptions": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "List of sequence ids to which the current user has subscribed for given task type"
          }
        }, 
        "summary": "Return the list of sequence ids to which the current user has subscribed for given task type.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/scenes/{scene_id}/task-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "scene_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Tasks related to given scene for current user"
          }
        }, 
        "summary": "Return tasks related to given scene for current user.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/scenes/{scene_id}/tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "scene_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Tasks related to given scene"
          }
        }, 
        "summary": "Return tasks related to given scene for current user.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/sequences/{sequence_id}/scenes": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Scenes related to given sequence"
          }
        }, 
        "summary": "Return scenes related to given sequence if the current user has access to it.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/sequences/{sequence_id}/shots": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Shots related to given sequence"
          }
        }, 
        "summary": "Return shots related to given sequence if the current user has access to it.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/sequences/{sequence_id}/task-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Tasks related to given sequence for current user"
          }
        }, 
        "summary": "Return tasks related to given sequence for current user.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/sequences/{sequence_id}/tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "sequence_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Tasks related to given sequence"
          }
        }, 
        "summary": "Return tasks related to given sequence for current user.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/shots/{shot_id}/task-types": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Tasks related to given shot for current user"
          }
        }, 
        "summary": "Return tasks related to given shot for current user.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/shots/{shot_id}/tasks": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "shot_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Tasks related to given shot"
          }
        }, 
        "summary": "Return tasks related to given shot for current user.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/tasks": {
      "get": {
        "responses": {
          "200": {
            "description": "Unfinished tasks currently assigned to current user"
          }
        }, 
        "summary": "Return tasks currently assigned to current user and of which status has is_done attribute set to false.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/tasks/{task_id}/subscribed": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "True if current user has subscribed to given task, False otherwise"
          }
        }, 
        "summary": "Return true if current user has subscribed to given task.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/user/tasks/{task_id}/time-spents/{date}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "task_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "date", 
            "required": true, 
            "schema": {
              "example": "Tue, 12 Jul 2022 00:00:00 GMT", 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Time spents for current user and given date"
          }, 
          "404": {
            "description": "Wrong date format"
          }
        }, 
        "summary": "Get time spents for current user and given date.", 
        "tags": [
          "User"
        ]
      }
    }, 
    "/data/working-files": {
      "get": {
        "description": "Filters can be specified in the query string.", 
        "responses": {
          "200": {
            "description": "All entries for given model"
          }, 
          "400": {
            "description": "Format error"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve all entries for given model.", 
        "tags": [
          "Crud"
        ]
      }, 
      "post": {
        "description": "JSON format is expected. The model performs the validation automatically when instantiated.", 
        "parameters": [
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model created"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Create a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/working-files/{instance_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "204": {
            "description": "Model deleted"
          }, 
          "400": {
            "description": "Statement or integrity error"
          }, 
          "404": {
            "description": "Instance non-existant"
          }
        }, 
        "summary": "Delete a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model as a JSON object"
          }, 
          "400": {
            "description": "Statement error"
          }, 
          "404": {
            "description": "Value error"
          }
        }, 
        "summary": "Retrieve a model corresponding at given ID and return it as a JSON object.", 
        "tags": [
          "Crud"
        ]
      }, 
      "put": {
        "description": "JSON format is expected. Model performs the validation automatically when fields are modified.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "body", 
            "name": "Model", 
            "schema": {
              "properties": {
                "data": {
                  "type": "list"
                }, 
                "limit": {
                  "type": "integer"
                }, 
                "nb_pages": {
                  "type": "integer"
                }, 
                "offset": {
                  "type": "integer"
                }, 
                "page": {
                  "type": "integer"
                }, 
                "total": {
                  "type": "integer"
                }
              }, 
              "type": "object"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Model updated"
          }, 
          "400": {
            "description": "Error"
          }
        }, 
        "summary": "Update a model with data given in the request body.", 
        "tags": [
          "Crud"
        ]
      }
    }, 
    "/data/working-files/{working_file_id}/file": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "working_file_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Working file downloaded"
          }
        }, 
        "summary": "Download a working file.", 
        "tags": [
          "Files"
        ]
      }, 
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "working_file_id", 
            "required": true, 
            "schema": {
              "example": "5dc235ec-125e-4ba5-b1db-604d4babc315", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Working file stored"
          }
        }, 
        "summary": "Store a working file.", 
        "tags": [
          "Files"
        ]
      }
    }, 
    "/export/csv/persons.csv": {
      "get": {
        "responses": {
          "200": {
            "description": "Exported as csv"
          }
        }, 
        "summary": "Export as csv.", 
        "tags": [
          "Export"
        ]
      }
    }, 
    "/export/csv/playlists/{playlist_id}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "playlist_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Playlist exported as csv"
          }
        }, 
        "summary": "Export a given playlist as csv.", 
        "tags": [
          "Export"
        ]
      }
    }, 
    "/export/csv/projects.csv": {
      "get": {
        "responses": {
          "200": {
            "description": "Exported as csv"
          }
        }, 
        "summary": "Export as csv.", 
        "tags": [
          "Export"
        ]
      }
    }, 
    "/export/csv/projects/{project_id}/assets.csv": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Assets exported as csv"
          }
        }, 
        "summary": "Export assets linked to a given project as csv.", 
        "tags": [
          "Export"
        ]
      }
    }, 
    "/export/csv/projects/{project_id}/casting.csv": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Casting exported as csv"
          }
        }, 
        "summary": "Export casting linked to a given project as csv.", 
        "tags": [
          "Export"
        ]
      }
    }, 
    "/export/csv/projects/{project_id}/edits.csv": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Edits exported as csv"
          }
        }, 
        "summary": "Export edits linked to a given project as csv.", 
        "tags": [
          "Export"
        ]
      }
    }, 
    "/export/csv/projects/{project_id}/shots.csv": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Shots exported as csv"
          }
        }, 
        "summary": "Export shots linked to a given project as csv.", 
        "tags": [
          "Export"
        ]
      }
    }, 
    "/export/csv/task-types.csv": {
      "get": {
        "responses": {
          "200": {
            "description": "Exported as csv"
          }
        }, 
        "summary": "Export as csv.", 
        "tags": [
          "Export"
        ]
      }
    }, 
    "/export/csv/tasks.csv": {
      "get": {
        "responses": {
          "200": {
            "description": "Exported as csv"
          }
        }, 
        "summary": "Export as csv.", 
        "tags": [
          "Export"
        ]
      }
    }, 
    "/export/csv/time-spents.csv": {
      "get": {
        "responses": {
          "200": {
            "description": "Exported as csv"
          }
        }, 
        "summary": "Export as csv.", 
        "tags": [
          "Export"
        ]
      }
    }, 
    "/import/csv/persons": {
      "post": {
        "responses": {
          "201": {
            "description": "Persons imported"
          }, 
          "400": {
            "description": "Format error"
          }
        }, 
        "summary": "Import persons as csv.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/csv/projects/{project_id}/assets": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "episode_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Instance imported"
          }, 
          "400": {
            "description": "Format error"
          }
        }, 
        "summary": "Import project instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/csv/projects/{project_id}/casting": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "episode_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Instance imported"
          }, 
          "400": {
            "description": "Format error"
          }
        }, 
        "summary": "Import project instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/csv/projects/{project_id}/edits": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "episode_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Instance imported"
          }, 
          "400": {
            "description": "Format error"
          }
        }, 
        "summary": "Import project instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/csv/projects/{project_id}/episodes/{episode_id}/task-types/{task_type_id}/estimations": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "episode_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Instance imported"
          }, 
          "400": {
            "description": "Format error"
          }
        }, 
        "summary": "Import project instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/csv/projects/{project_id}/shots": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "episode_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Instance imported"
          }, 
          "400": {
            "description": "Format error"
          }
        }, 
        "summary": "Import project instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/csv/projects/{project_id}/task-types/{task_type_id}/estimations": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "project_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "task_type_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "episode_id", 
            "required": false, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "201": {
            "description": "Instance imported"
          }, 
          "400": {
            "description": "Format error"
          }
        }, 
        "summary": "Import project instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/kitsu/comments": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import Kistu resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/kitsu/entities": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import Kistu resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/kitsu/entity-links": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import Kistu resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/kitsu/projects": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import Kistu resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/kitsu/tasks": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import Kistu resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/assets": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/episodes": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/errors": {
      "get": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun error resource.", 
        "tags": [
          "Source"
        ]
      }, 
      "post": {
        "responses": {
          "200": {
            "description": "Resource serialized"
          }
        }, 
        "summary": "Serialize shotgun error resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/errors/{error_id}": {
      "delete": {
        "parameters": [
          {
            "in": "path", 
            "name": "error_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Error deleted"
          }, 
          "404": {
            "description": "Error non-existant or Statement error"
          }
        }, 
        "summary": "Delete error.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/notes": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/persons": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/projectconnections": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/projects": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/asset": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/episode": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/note": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/person": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/project": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/projectconnection": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/scene": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/sequence": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/shot": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/status": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/step": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/task": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/remove/version": {
      "post": {
        "responses": {
          "200": {
            "description": "Instance removed"
          }
        }, 
        "summary": "Import remove instance.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/scenes": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/sequences": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/shots": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/status": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/steps": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/tasks": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/import/shotgun/versions": {
      "post": {
        "responses": {
          "200": {
            "description": "Resource imported"
          }
        }, 
        "summary": "Import shotgun resource.", 
        "tags": [
          "Source"
        ]
      }
    }, 
    "/movies/low/preview-files/{instance_id}.mp4": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Lowdef movie preview downloaded"
          }, 
          "403": {
            "description": "Instance not allowed"
          }, 
          "404": {
            "description": "File not found"
          }
        }, 
        "summary": "Download a lowdef movie preview.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/movies/originals/preview-files/{instance_id}.mp4": {
      "get": {
        "description": "It stores the preview file and generates three picture files matching preview when it's possible: a square thumbnail, a rectangle thumbnail and a midsize file.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Movie preview downloaded"
          }, 
          "403": {
            "description": "Instance not allowed"
          }, 
          "404": {
            "description": "File not found"
          }
        }, 
        "summary": "Download a movie preview.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/movies/originals/preview-files/{instance_id}/download": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Movie preview downloaded"
          }, 
          "403": {
            "description": "Instance not allowed"
          }, 
          "404": {
            "description": "File not found"
          }
        }, 
        "summary": "Download a movie preview.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/originals/preview-files/{instance_id}.png": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Thumbnail downloaded"
          }, 
          "403": {
            "description": "Instance not allowed"
          }, 
          "404": {
            "description": "Picture file not found"
          }
        }, 
        "summary": "Download a thumbnail.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/originals/preview-files/{instance_id}.{extension}": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }, 
          {
            "in": "path", 
            "name": "extension", 
            "required": true, 
            "schema": {
              "example": "png, pdf, jpg, jpeg, ...", 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Generic file preview downloaded"
          }, 
          "403": {
            "description": "Instance not allowed"
          }, 
          "404": {
            "description": "Non-movie file not found"
          }
        }, 
        "summary": "Download a generic file preview.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/originals/preview-files/{instance_id}/download": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Generic file preview downloaded as attachment"
          }, 
          "403": {
            "description": "Instance not allowed"
          }, 
          "404": {
            "description": "Standard file not found"
          }
        }, 
        "summary": "Download a generic file preview as attachment.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/preview-files/{instance_id}": {
      "post": {
        "description": "It stores the preview file and generates three picture files matching preview when it's possible: a square thumbnail, a rectangle thumbnail and a midsize file.", 
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Preview added"
          }
        }, 
        "summary": "Main resource to add a preview. ", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/previews/preview-files/{instance_id}.png": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Thumbnail downloaded"
          }, 
          "403": {
            "description": "Instance not allowed"
          }, 
          "404": {
            "description": "Picture file not found"
          }
        }, 
        "summary": "Download a thumbnail.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/thumbnails-square/preview-files/{instance_id}.png": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Thumbnail downloaded"
          }, 
          "403": {
            "description": "Instance not allowed"
          }, 
          "404": {
            "description": "Picture file not found"
          }
        }, 
        "summary": "Download a thumbnail.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/thumbnails/organisations/{instance_id}": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Thumbnail created"
          }, 
          "404": {
            "description": "Instance already exists"
          }
        }, 
        "summary": "Create a thumbnail.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/thumbnails/organisations/{instance_id}.png": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Thumbnail downloaded"
          }, 
          "403": {
            "description": "Instance not allowed"
          }, 
          "404": {
            "description": "Thumbnail file not found"
          }
        }, 
        "summary": "Download a thumbnail.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/thumbnails/persons/{instance_id}": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Thumbnail created"
          }, 
          "404": {
            "description": "Instance already exists"
          }
        }, 
        "summary": "Create a thumbnail.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/thumbnails/persons/{instance_id}.png": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Thumbnail downloaded"
          }, 
          "403": {
            "description": "Instance not allowed"
          }, 
          "404": {
            "description": "Thumbnail file not found"
          }
        }, 
        "summary": "Download a thumbnail.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/thumbnails/preview-files/{instance_id}.png": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Thumbnail downloaded"
          }, 
          "403": {
            "description": "Instance not allowed"
          }, 
          "404": {
            "description": "Picture file not found"
          }
        }, 
        "summary": "Download a thumbnail.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/thumbnails/projects/{instance_id}": {
      "post": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Thumbnail created"
          }, 
          "404": {
            "description": "Instance already exists"
          }
        }, 
        "summary": "Create a thumbnail.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/pictures/thumbnails/projects/{instance_id}.png": {
      "get": {
        "parameters": [
          {
            "in": "path", 
            "name": "instance_id", 
            "required": true, 
            "schema": {
              "example": "a24a6ea4-ce75-4665-a070-57453082c25", 
              "type": "UUID"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "Thumbnail downloaded"
          }, 
          "403": {
            "description": "Instance not allowed"
          }, 
          "404": {
            "description": "Thumbnail file not found"
          }
        }, 
        "summary": "Download a thumbnail.", 
        "tags": [
          "Previews"
        ]
      }
    }, 
    "/stats": {
      "get": {
        "responses": {
          "200": {
            "description": "Main stats"
          }, 
          "403": {
            "description": "Permission denied"
          }
        }, 
        "summary": "Retrieve main stats.", 
        "tags": [
          "Index"
        ]
      }
    }, 
    "/status": {
      "get": {
        "summary": "Retrieve API name, version and status.", 
        "tags": [
          "Index"
        ]
      }
    }, 
    "/status.txt": {
      "get": {
        "summary": "Retrieve API name, version and status as txt.", 
        "tags": [
          "Index"
        ]
      }
    }, 
    "/status/influx": {
      "get": {
        "summary": "Retrieve status of database and time.", 
        "tags": [
          "Index"
        ]
      }
    }, 
    "/status/resources": {
      "get": {
        "summary": "Retrieve date and CPU, memory and jobs stats.", 
        "tags": [
          "Index"
        ]
      }
    }
  }, 
  "schemes": [
    "http", 
    "https"
  ], 
  "swagger": "2.0", 
  "tags": [
    {
      "name": "Authentification"
    }, 
    {
      "name": "Assets"
    }, 
    {
      "name": "Breakdown"
    }, 
    {
      "name": "Comments"
    }, 
    {
      "name": "Crud"
    }, 
    {
      "name": "Edits"
    }, 
    {
      "name": "Entities"
    }, 
    {
      "name": "Events"
    }, 
    {
      "name": "Export"
    }, 
    {
      "name": "Files"
    }, 
    {
      "name": "Index"
    }, 
    {
      "name": "News"
    }, 
    {
      "name": "Persons"
    }, 
    {
      "name": "Playlists"
    }, 
    {
      "name": "Previews"
    }, 
    {
      "name": "Projects"
    }, 
    {
      "name": "Search"
    }, 
    {
      "name": "Shots"
    }, 
    {
      "name": "Source"
    }, 
    {
      "name": "Tasks"
    }, 
    {
      "name": "User"
    }
  ]
}
